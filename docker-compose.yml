version: '3.8'

services:
  # Development service with hot-reload and mounted volumes
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/app
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - LOG_LEVEL=debug
      - ALLOWED_ORIGINS=*
      - RELOAD=true
      - PLAYWRIGHT_TIMEOUT=30000
      - MAX_CONTENT_LENGTH=10485760
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Production service with optimized settings
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - ALLOWED_ORIGINS=https://your-domain.com
      - RELOAD=false
      - PLAYWRIGHT_TIMEOUT=30000
      - MAX_CONTENT_LENGTH=10485760
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    restart: always
    env_file:
      - .env.prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
    depends_on:
      - app-prod

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data: 